import cv2
import RPi.GPIO as GPIO
from adafruit_servokit import ServoKit
myKit=ServoKit(channels=16)
import time
GPIO.cleanup()
GPIO.setmode(GPIO.BOARD)
GPIO.setup(11,GPIO.OUT)
GPIO.setup(21,GPIO.OUT)

print(cv2._version_)
dispW=640
dispH=480
flip=2

xpos=90

#Uncomment These next Two Line for Pi Camera
#camSet='nvarguscamerasrc !  video/x-raw(memory:NVMM), width=3264, height=2464, format=NV12, framerate=21/1 ! nvvidconv flip-method='+str(flip)+' ! video/x-raw, width='+str(dispW)+', height='+str(dispH)+', format=BGRx ! videoconvert ! video/x-raw, format=BGR ! appsink'
#cam= cv2.VideoCapture(camSet)

#Or, if you have a WEB cam, uncomment the next line
#(If it does not work, try setting to '1' instead of '0')
cam=cv2.VideoCapture(0)
cam.set(3,640)
cam.set(4,480)
face_cascade=cv2.CascadeClassifier('/home/viper/Desktop/Pypro/cascade/face.xml')
eye_cascade=cv2.CascadeClassifier('/home/viper/Desktop/Pypro/cascade/nose.xml')
print(face_cascade.empty())
print(eye_cascade.empty())


while True:
    ret, frame = cam.read()    
    
    frameSmall=cv2.resize(frame,(0,0),fx=.5,fy=.5)

    gray=cv2.cvtColor(frameSmall,cv2.COLOR_BGR2GRAY)
    faces=face_cascade.detectMultiScale(gray,1.3,5)

    #GPIO.output(11,False)
    
    for (x,y,w,h) in faces:

        roi_gray=gray[y:y+h,x:x+w]
        eyes=eye_cascade.detectMultiScale(roi_gray)
        x=x*2
        y=y*2
        w=w*2
        h=h*2
        
        xcent = x + w/2
        xerror = xcent - dispW/2
        if abs(xerror)>15:
            xpos= xpos - xerror/50
            
        if xpos>180:
            xpos=180
        if xpos<0:
            xpos=0
  
        myKit.servo[0].angle=xpos
        
        
        cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
        Roi_color=frame[y:y+h,x:x+w]
        GPIO.output(11,False)
        GPIO.output(21,True)
        

        for (xeye,yeye,weye,heye) in eyes:
            xeye=xeye*2
            yeye=yeye*2
            weye=weye*2
            heye=heye*2
            #cv2.rectangle(Roi_color,(xeye,yeye),(xeye+weye,yeye+heye),(255,0,0),2)
            cv2.rectangle(frame,(x,y),(x+w,y+h),(0,0,255),2)
            GPIO.output(11,True)
            GPIO.output(21,False)
        break

    cv2.imshow('nanoCam', frame)
    cv2.moveWindow('nanoCam',0,0)

   
    if cv2.waitKey(1)==ord('q'):
        break
cam.release()

cv2.destroyAllWindows()
